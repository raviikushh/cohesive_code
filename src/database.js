import {
  addDoc,
  arrayRemove,
  arrayUnion,
  collection,
  deleteDoc,
  doc,
  getDoc,
  getDocs,
  onSnapshot,
  query,
  serverTimestamp,
  setDoc,
  updateDoc,
  where,
} from "firebase/firestore";

import { db } from "./firebase";

// REFERENC DOCS : https://firebase.google.com/docs/firestore/manage-data/add-data

// DATA TYPES EXAMPLES
// const docData = {
//     stringExample: "Hello world!",
//     booleanExample: true,
//     numberExample: 3.14159265,
//     dateExample: Timestamp.fromDate(new Date("December 10, 1815")),
//     arrayExample: [5, true, "hello"],
//     nullExample: null,
//     objectExample: {
//         a: 5,
//         b: {
//             nested: "foo"
//         }
//     }
// };
// await setDoc(doc(db, "data", "one"), docData);

// This is useful when we want to set a document with a specific id
export const setDocument = (collection, docId, data) => {
  const ref = doc(db, collection, docId);
  return setDoc(ref, {
    ...data,
    created_at: serverTimestamp(),
    updated_at: serverTimestamp(),
  });
};

// Adds a document to a collection with an autogenerated id
export const addDocument = (collectionName, data) => {
  const ref = collection(db, collectionName);
  return addDoc(ref, {
    ...data,
    created_at: serverTimestamp(),
    updated_at: serverTimestamp(),
  });
};

// update a document in a collection
export const updateDocument = (collection, docId, data) => {
  const ref = doc(db, collection, docId);
  return updateDoc(ref, { ...data, updated_at: serverTimestamp() });
};
// Update code in database String : code
export const updateCode = (collection, docId, data) => {
  const ref = doc(db, collection, docId);
  return updateDoc(ref, { code: data, updated_at: serverTimestamp() });
};

// Add Collaborators in Array
export const addCollaborator = (collection, docId, data) => {
  const ref = doc(db, collection, docId);
  return updateDoc(ref, { collaborators: arrayUnion(data) });
};

// Delete Collaborators in Array
export const deleteCollaborator = (collection, docId, data) => {
  const ref = doc(db, collection, docId);
  return updateDoc(ref, { collaborators: arrayRemove(data) });
};

// Add projects in Shared
export const addProjectsInShared = (collection, docId, data) => {
  const ref = doc(db, collection, docId);
  return updateDoc(ref, { projects: arrayUnion(data) });
};

// Delete projects in Shared
export const deleteProjectsInShared = (collection, docId, data) => {
  const ref = doc(db, collection, docId);
  return updateDoc(ref, { projects: arrayRemove(data) });
};

// Add online Users in Array
export const updateUserStatusToOnline = (docId, data) => {
  const ref = doc(db, "/room", docId);
  return updateDoc(ref, { online: arrayUnion(data) });
};

// Delete online Users in Array
export const updateUserStatusToOffline = (docId, data) => {
  const ref = doc(db, "/room", docId);
  return updateDoc(ref, { online: arrayRemove(data) });
};

export const deleteDocument = (collection, docId) => {
  const ref = doc(db, collection, docId);
  return deleteDoc(ref);
};

export const getDocument = async (collection, docId) => {
  const docRef = doc(db, collection, docId);
  const docSnap = await getDoc(docRef);
  if (docSnap.exists()) {
    return docSnap.data();
  } else {
    return null;
  }
};

// For query reference - check get multiple documents from a collection in https://firebase.google.com/docs/firestore/query-data/get-data
// Example query : const query = query(collection(db, "cities"), where("state", "==", "CA"));
// Fetch multiple documents from a collection using a query
export const getProjectsByUser = async (userId) => {
  const q = query(
    collection(db, "projects"),
    where("created_by", "==", userId)
  );
  return await queryDocuments(q);
};

export const queryDocuments = async (query) => {
  const querySnapshot = await getDocs(query);
  const docs = [];
  querySnapshot.forEach((doc) => {
    docs.push({ id: doc.id, ...doc.data() });
  });
  return docs;
};
